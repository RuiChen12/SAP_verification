module Device
    
    use string.String
    use mach.int.Int64
    use list.List

    type device = {
        name: string;
        bs : int64;
        nb : int64;
    }
  
    val function read (n : int64) : list int
    val function write (n : int64) (l : list int) : unit
end

(*after the first block is all zeros and right size. The first block has the nb of the device followed by all zerso*)

module Getn 

  use int.Int
  use list.List
  use list.Length
  use list.NthNoOpt
  use list.Mem
  use option.Option

  let rec getn (lst : list int) (n : int) : (list int)
    requires { 0 <= n <= length lst }
    ensures { length result = n }
    ensures { n > 0 -> nth 0 result = nth 0 lst }
    ensures { n = 0 -> result = Nil }
    variant { n }
   = 
    match lst with
      | Nil -> Nil
      | Cons first rest -> if n = 0 then Nil else Cons first (getn rest (n-1))
  end
end

module Restn

  use int.Int
  use list.List
  use list.Length
  use option.Option
  exception UnableToSkip

  let rec restn (lst : list int) (n : int) : list int
    requires { 0 <= n }
    raises { UnableToSkip -> n > length lst }
    ensures { n <= length lst -> length result = length lst - n }
    ensures { n > length lst -> false }
    variant { n }
  = 
    if n <= 0 then lst
    else match lst with
      | Nil -> raise UnableToSkip
      | Cons _ rest -> restn rest (n - 1)
  end
end


module N64Bytes

  use int.Int
  use mach.int.Int64
  use list.List
  use list.Length
  use int.ComputerDivision
  use Getn
  use list.NthNoOpt
  use list.Mem
  use option.Option

  (* Helper function to reverse a list *)
  let rec reverse_helper (acc: list int) (lst: list int) : list int
    ensures { length result = length acc + length lst }
    variant { length lst }
  = match lst with
    | Nil -> acc
    | Cons h t -> reverse_helper (Cons h acc) t
  end

  let reverse (lst: list int) : list int
    ensures { length result = length lst }
  = reverse_helper Nil lst

  (* Function to convert a 64-bit integer to a list of bytes *)
  let rec make_rev_bytes (x: int64) (index: int) : list int
    requires { 0 <= index <= 8 }
    requires { x >= 0 }
    ensures { length result = index }
    ensures { forall i: int. 0 <= i < index -> 0 <= nth i result < 256 }
    variant { index }
  = if index <= 0 then Nil
    else
      let byte = to_int (x % (Int64.of_int 256)) in
      Cons byte (make_rev_bytes (x / (Int64.of_int 256)) (index - 1))

  let n64bytes (n: int64) : list int
    requires { n >= 0 }
    ensures { length result = 8 }
  = let rev_bytes = make_rev_bytes n 8 in
    reverse rev_bytes

  (* Recursive function to compute a 64-bit integer from a list of bytes *)
let rec compute (lst: list int) : int64
    requires { forall i: int. 0 <= i < length lst -> 0 <= nth i lst < 256 }
    ensures { result >= 0 }
    variant { length lst }
  = match lst with
    | Nil -> Int64.of_int 0
    | Cons first rest ->
      assert { 0 <= first < 256 };
      let first_value = Int64.of_int first in
      let rest_value = compute rest in
      assert { rest_value >= 0 };
      let combined_value = first_value + (rest_value * (Int64.of_int 256)) in
      assert { combined_value >= 0 };
      combined_value
  end

  (* Main function to convert a list of bytes to a 64-bit integer *)
  let bytes64 (lst: list int) : int64
    requires { length lst >= 8 }
    ensures { result >= 0 }
  = let first8 = getn lst 8 in
    compute (reverse first8)


end


(*module Make

  use Device
  use int.Int
  use mach.int.Int64
  use list.List
  use list.Length
  use list.NthNoOpt
  use N64Bytes

  predicate all_zero (lst: list int64) =
    forall j. 0 <= j < length lst -> nth j lst = 0

  let rec make_zeros (n : int64) : (list int64)
  requires {n >= 0}
  ensures {n = length result}
  ensures {all_zero (result)}
  variant {n}
  = 
    if n = 0 
      then Nil
    else
      Cons 0 (make_zeros (n - 1))  
    let rec make_empty_bytes (device: device) (nb: int) : list int
  variant { nb }
= n64bytes nb + (make_zeros (device.bs - 8))
end*)


(*module Internal
  use Device
  use mach.int.Int64
  let get_header (d:device) (int:bn) = 
end
 module Format

  use Device
  use int.Int
  use mach.int.Int64

  let format (device : device) : unit
    requires {to_int d.bs > 9}
  = 
    let zeros = make_zeros device.bs in
    let rec write_all (n : int) 
    =
      if n >= de.nb then ()
      else write n zeros; write_all (n + 1) in
      (write_all 1; write 0 (make_empty_block d d.nb))
end*)
